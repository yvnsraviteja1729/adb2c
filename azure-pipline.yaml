trigger:
  - master
  - feature/pipelines

pool:
  vmImage: "windows-latest"

# schedules:
# - cron: "0/60 */24 * * *"
#   displayName: Every 6 hours build
#   branches:
#     include:
#     - feature/*
#   always: true


stages:
  - stage:
    jobs:
      - job: Building_Policies
        variables:
        - group: another_group
        - group: perf_variables
        steps:
        
        - task: SendEmail@1
          inputs:
            To: 'venkatanagasairaviteja.yelchuri@publicissapient.com'
            From: 'yelchurisairaviteja@gmail.com'
            Subject: 'test mail'
            Body: 'this is the test body'
            BodyAsHtml: false
            AddAttachment: false
            SmtpServer: 'smtp.gmail.com'
            SmtpUsername: 'yelchurisairaviteja@gmail.com'
            SmtpPassword: 'wncowwwlsurjlqxq'

        - task: PowerShell@2
          inputs:
            targetType: 'inline'
            script: |
              # Write your commands here
              $myorg = "venyelch-organization1"
              $myproj = "practice-project1"
              $sendmailto = "venkatanagasairaviteja.yelchuri@publicissapient.com"
              $mysubject = "my custom subject of the mail" ## Subject of the email
              $mailbody = "my custom mail body details" ## mail body
              #########################
              ## Get tfsids of users whom to send mail
              $mailusers = "$sendmailto"
              $mymailusers = $mailusers -split "",""
              $pat = "Bearer $env:System_AccessToken"
              $myurl ="https://dev.azure.com/${myorg}/_apis/projects/${myproj}/teams?api-version=5.1"
              $data = Invoke-RestMethod -Uri "$myurl" -Headers @{Authorization = $pat}
              $myteams = $data.value.id
              ##Get list of members in all teams
              $myusersarray = @()
              foreach($myteam in $myteams) {
              $usrurl = "https://dev.azure.com/${myorg}/_apis/projects/${myproj}/teams/"+$myteam+"/members?api-version=5.1"
              $userdata = Invoke-RestMethod -Uri "$usrurl" -Headers @{Authorization = $pat}
              $myusers = $userdata.value
              foreach($myuser in $myusers) {
              $myuserid = $myuser.identity.id
              $myusermail = $myuser.identity.uniqueName
              $myuserrecord = "$myuserid"+":"+"$myusermail"
              $myusersarray += $myuserrecord
              }
              }
              ## filter unique users
              $myfinalusersaray = $myusersarray | sort -Unique
              ## create final hash of emails and tfsids
              $myusershash = @{}
              for ($i = 0; $i -lt $myfinalusersaray.count; $i++)
              {
              $myusershash[$myfinalusersaray[$i].split("":"")[1]] = $myfinalusersaray[$i].split(":")[0]
              }
              ##
              ## create list of tfsid of mailers
              foreach($mymail in $mymailusers) {
              $myto = $myto +'"'+$myusershash[$mymail]+'",'
              }
              ##send mail
              $uri = "https://${myorg}.vsrm.visualstudio.com/${myproj}/_apis/Release/sendmail/$(RELEASE.RELEASEID)?api-version=3.2-preview.1"
              $requestBody =
              @"
              {
              "senderType":1,
              "to":{"tfsIds":[$myto]},
              "body":"${mailbody}"",
              "subject":"${mysubject}""
              }
              "@
              Try {
              Invoke-RestMethod -Uri $uri -Body $requestBody -Method POST -Headers @{Authorization = $pat} -ContentType "application/json"
              }
              Catch {
              $_.Exception
              }
              


          # - task: PowerShell@2
          #   inputs:
          #     targetType: "inline"
          #     script: |
          #       # Echo out the Variables for the log      
          #       # write-host $(B2CTENANTNAME) $(CLIENTCREDAPPID) $(ProxyIdentityExperienceFrameworkAppName) $(IdentityExperienceFrameworkAppName) $(B2CExtensionAttributeAppName) $(AppInsightInstrumentationKey) 
          #       write-host $(check) $(environment)
          #       # run the deployment script that modifies the policies and then uploads them
          #       # .\scripts\build-prepare.ps1 -PolicyPath .\policies -PolicyPrefix $(B2CPolicyPrefix) -TenantName $(B2CTENANTNAME) -AppID $(CLIENTCREDAPPID) -AppKey $(CLIENTCREDAPPKEY) -ProxyIdentityExperienceFrameworkAppName $(ProxyIdentityExperienceFrameworkAppName) -IdentityExperienceFrameworkAppName $(IdentityExperienceFrameworkAppName) -B2CExtensionAttributeAppName $(B2CExtensionAttributeAppName) -ConfigKeyValues $params 
          #       .\runShells.ps1 -ScriptsPath ".\scripts"
          # - task: CopyFiles@2
          #   inputs:
          #     SourceFolder: "$(System.DefaultWorkingDirectory)/policies"
          #     Contents: "**"
          #     TargetFolder: "$(Build.ArtifactStagingDirectory)/policies"
          #     CleanTargetFolder: true
          #     OverWrite: true

          
          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          #     ArtifactName: "drop"
          #     # publishLocation: ""      
          # - task: PublishBuildArtifacts@1
          #   inputs:
          #     PathtoPublish: "$(Build.ArtifactStagingDirectory)"
          #     ArtifactName: "drop2"
              # publishLocation: "Container"          
      # - job: download
      #   dependsOn: Building_Policies
      #   steps:
        # - task: DownloadBuildArtifacts@0
        #   inputs:
        #     buildType: 'current'
        #     downloadType: 'single'
        #     artifactName: 'drop'
        #     downloadPath: '$(System.DefaultWorkingDirectory)'

        # - task: DownloadBuildArtifacts@0
        #   inputs:
        #             buildType: 'current'
        #             downloadType: 'single'
        #             artifactName: 'drop2'
        #             downloadPath: '$(System.DefaultWorkingDirectory)'

        # - task: Bash@3
        #   inputs:
        #       targetType: "inline"
        #       script: |
        #         ls 
        #         echo $(System.DefaultWorkingDirectory)
        #         echo $(System.ArtifactsDirectory)
        #         echo $(Build.ArtifactStagingDirectory)
        #         pwd
        #         cd $(Build.ArtifactStagingDirectory)
        #         ls
       
        # - task: SendEmail@1
        #   inputs:
        #     To: 'yvnsraviteja1729@gmail.com venkatanagasairaviteja.yelchuri@publicissapient.com' 
        #     From: 'yelchurisairaviteja@gmail.com'
        #     Subject: 'test mail'
        #     Body: 'this is the test body'
        #     BodyAsHtml: false
        #     AddAttachment: false
        #     SmtpServer: 'smtp.gmail.com'
        #     SmtpUsername: 'yelchurisairaviteja@gmail.com'
        #     SmtpPassword: 'golydeqkjjyaimin'